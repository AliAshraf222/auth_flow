// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  EMAIL_PASSWORD 
  GOOGLE 
  GITHUB 
}

enum Role {
  ADMIN
  USER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model VerificationToken{
  id String @id @default(cuid())
  token String @unique
  expiresAt DateTime
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  @@index([userId])
}

model RefreshToken{
  id String @id @default(cuid())

  token String @unique
  expiresAt DateTime

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  @@index([userId])
}

model OauthAccount{
  id String @id @default(cuid())

  provider AuthProvider
  providerAccountId String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model PasswordResetToken{
  id String @id @default(cuid())

  token String @unique
  expiresAt DateTime

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  @@index([userId])
}


model Todo{
  id String @id @default(cuid())

  title String
  completed Boolean @default(false)
  description String?

  priority Priority @default(MEDIUM)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model User{
  id          String      @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String      @unique

  password    String?
  passwordResetToken PasswordResetToken[]

  isEmailVerified Boolean @default(false)

  verificationToken VerificationToken[]

  provider AuthProvider @default(EMAIL_PASSWORD)
  role Role @default(USER)

  refreshToken RefreshToken[]
  oauthAccounts OauthAccount[]

  todos Todo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}


//
// model User {
//   id                      String             @id @default(uuid())
//   age                     Int
//   role                    Role               @default(student)
//   createdAt               DateTime           @default(now())
//   updatedAt               DateTime           @updatedAt
//   email                   String             @unique
//   image                   String?
//   password                String
//   firstname               String
//   lastname                String
//   username                String             @unique
//   encodedimagedata        String? //Float[]
//   isVerified              Boolean            @default(false)
//   verificationCode        String             @unique @default(uuid())
//   verificationCodeExpiers DateTime
//   licenseplate            String?            @unique
//   enrolledCourses         CourseEnrollment[]
//   profile                 profile?
//   tokens                  Token[]

//   @@index([id])
// }
//